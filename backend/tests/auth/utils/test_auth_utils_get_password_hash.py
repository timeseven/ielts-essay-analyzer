import bcrypt

from app.auth.utils import get_password_hash


def test_get_password_hash_returns_str():
    """
    Test that get_password_hash returns a string and is different
    from the input password.

    This test ensures that the get_password_hash function returns
    a hashed password as a string. It also verifies that the hashed
    password is not the same as the original plain text password.
    """

    password = "my_secret"
    hashed = get_password_hash(password)

    assert isinstance(hashed, str)
    assert password != hashed


def test_get_password_hash_is_random():
    """
    Test that get_password_hash produces a different hash each time it is called
    even if called with the same password.

    This test ensures that the get_password_hash function is using a random
    salt when hashing the password. If the function was deterministic, then
    the same password would produce the same hash each time, which is not
    desirable for security.
    """
    password = "my_secret"
    hashed1 = get_password_hash(password)
    hashed2 = get_password_hash(password)

    assert hashed1 != hashed2


def test_get_password_hash_can_be_verified():
    """
    Test that a hashed password can be verified using the verify_password
    function.

    This test ensures that the verify_password function works correctly
    with a hashed password generated by the get_password_hash function.
    """
    password = "my_secret"
    hashed = get_password_hash(password)

    assert bcrypt.checkpw(password.encode("utf-8"), hashed.encode("utf-8")) is True
